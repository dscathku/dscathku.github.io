{"version":3,"sources":["assets/images/banner.png","assets/images/logo.png","serviceWorker.js","components/shared/navbar/NavBar.js","hooks/useComponentBox.js","components/shared/layout/Layout.js","components/home/jumbotron/Jumbotron.js","components/home/event/Event.js","components/home/purpose/Purpose.js","components/home/objective/Objective.js","components/home/HomePage.js","components/shared/not-found-404/NotFound404.js","components/projects/ProjectsPage.js","components/events/EventsPage.js","components/about/AboutPage.js","App.js","config/theme.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","NavBar","getBox","ref","current","getBoundingClientRect","Layout","children","navBarContainerRef","useRef","height","useState","componentBox","setComponentBox","handleResize","useCallback","useEffect","refCurrent","ResizeObserver","resizeObserver","observe","disconnect","addEventListener","removeEventListener","useComponentBox","Box","minH","color","position","w","top","left","backgroundColor","key","marginTop","Jumbotron","Event","Purpose","Objective","HomePage","Stack","spacing","NotFound404","isUnBuiltPage","history","useHistory","Flex","direction","alignItems","justifyContent","Image","src","BannerImage","alt","width","Text","mt","fontSize","Button","variantColor","onClick","push","ProjectsPage","EventsPage","AboutPage","App","path","exact","theme","defaultTheme","colors","50","100","200","300","400","500","600","700","800","900","fonts","body","heading","mono","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43f409da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.3d77e973.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.bd954cee.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nexport const NavBar = () => {\n  return <>navbar</>;\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nconst getBox = (ref) => ref?.current?.getBoundingClientRect() || {};\n\nexport const useComponentBox = (ref) => {\n  const [componentBox, setComponentBox] = useState(getBox(ref));\n\n  const handleResize = useCallback(() => {\n    if (ref.current) setComponentBox(getBox(ref));\n  }, [ref]);\n\n  useEffect(() => {\n    const refCurrent = ref.current;\n    if (!refCurrent) {\n      return;\n    }\n\n    handleResize();\n\n    // @ts-ignore\n    if (typeof ResizeObserver === 'function') {\n      // @ts-ignore\n      let resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(refCurrent);\n\n      return () => {\n        resizeObserver.disconnect(refCurrent);\n        resizeObserver = null;\n      };\n    }\n    window.addEventListener('componentResize', handleResize);\n\n    return () => {\n      window.removeEventListener('componentResize', handleResize);\n    };\n  }, [ref, handleResize]);\n\n  return componentBox;\n};\n","import React, { useRef } from 'react';\nimport { Box } from '@chakra-ui/core';\n\nimport { NavBar } from '../navbar';\nimport { useComponentBox } from '../../../hooks/useComponentBox';\n\nexport const Layout = ({ children }) => {\n  const navBarContainerRef = useRef(null);\n  const { height } = useComponentBox(navBarContainerRef);\n  const defaultHeight = 75;\n\n  return (\n    <Box minH={'100vh'} color={'gray.900'}>\n      {/* navbar */}\n      <Box\n        ref={navBarContainerRef}\n        position={'fixed'}\n        w={'full'}\n        top={0}\n        left={0}\n        backgroundColor={'white'}>\n        <NavBar />\n      </Box>\n\n      {/* page components */}\n      <Box key={`box-${height || defaultHeight}`} marginTop={`${height || defaultHeight}px`}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/core';\n\nexport const Jumbotron = () => {\n  return <Box>jumbotron</Box>;\n};\n","import React from 'react';\nimport Box from '@chakra-ui/core/dist/Box';\n\nexport const Event = () => {\n  return <Box>event</Box>;\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/core';\n\nexport const Purpose = () => {\n  return <Box>purpose</Box>;\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/core';\n\nexport const Objective = () => {\n  return <Box>objective</Box>;\n};\n","import React from 'react';\n\nimport { Stack } from '@chakra-ui/core';\n\nimport { Layout } from '../shared';\nimport { Jumbotron } from './jumbotron';\nimport { Event } from './event';\nimport { Purpose } from './purpose';\nimport { Objective } from './objective';\n\nexport const HomePage = () => {\n  return (\n    <Layout>\n      <Stack spacing={4}>\n        <Jumbotron />\n\n        <Event />\n\n        <Purpose />\n\n        <Objective />\n\n        {/* todo: uncomment when there is a project */}\n        {/*<Project/>*/}\n      </Stack>\n    </Layout>\n  );\n};\n","import React from 'react';\nimport { Button, Flex, Image, Text } from '@chakra-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport { BannerImage } from '../../../assets/images';\n\nexport const NotFound404 = ({ isUnBuiltPage }) => {\n  const history = useHistory();\n\n  const onClick = () => {\n    history.push('/');\n  };\n\n  return (\n    <Flex height={'90vh'} direction={'column'} alignItems={'center'} justifyContent={'center'}>\n      <Image src={BannerImage} alt={'banner'} width={'300px'} />\n\n      <Text mt={4} fontSize={['xl', 'xl', '2xl']}>\n        {isUnBuiltPage\n          ? `Sorry, this page is still being built.`\n          : `Sorry, this page cannot be found.`}\n      </Text>\n\n      <Button mt={4} variantColor={'brand-blue'} onClick={onClick}>\n        Go back home\n      </Button>\n    </Flex>\n  );\n};\n","import React from 'react';\n\nimport { Layout } from '../shared/layout';\nimport { NotFound404 } from '../shared/not-found-404';\n\nexport const ProjectsPage = () => {\n  return (\n    <Layout>\n      <NotFound404 isUnBuiltPage />\n    </Layout>\n  );\n};\n","import React from 'react';\n\nimport { Layout } from '../shared/layout';\nimport { NotFound404 } from '../shared/not-found-404';\n\nexport const EventsPage = () => {\n  return (\n    <Layout>\n      <NotFound404 isUnBuiltPage />\n    </Layout>\n  );\n};\n","import React from 'react';\n\nimport { Layout } from '../shared/layout';\nimport { NotFound404 } from '../shared/not-found-404';\n\nexport const AboutPage = () => {\n  return (\n    <Layout>\n      <NotFound404 isUnBuiltPage />\n    </Layout>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { HomePage } from './components/home';\nimport { ProjectsPage } from './components/projects';\nimport { EventsPage } from './components/events';\nimport { AboutPage } from './components/about';\n\nimport { Layout } from './components/shared/layout';\nimport { NotFound404 } from './components/shared/not-found-404';\n\nexport const App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path={'/projects'}>\n          <ProjectsPage />\n        </Route>\n\n        <Route path={'/events'}>\n          <EventsPage />\n        </Route>\n\n        <Route path={'/about'}>\n          <AboutPage />\n        </Route>\n\n        <Route exact path={'/'}>\n          <HomePage />\n        </Route>\n\n        <Route path={'*'}>\n          <Layout>\n            <NotFound404 />\n          </Layout>\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import { theme as defaultTheme } from '@chakra-ui/core';\n\nexport const theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    'brand-blue': {\n      50: '#c6dafc',\n      100: '#8eb6f8',\n      200: '#689df6',\n      300: '#5591f5',\n      400: '#4285f4',\n      500: '#3b78dc',\n      600: '#356ac3',\n      700: '#285092',\n      800: '#1a3562',\n      900: '#0d1b31',\n    },\n    'brand-red': {\n      50: '#f9c7c2',\n      100: '#f28e86',\n      200: '#ee695d',\n      300: '#ec5649',\n      400: '#ea4335',\n      500: '#d33c30',\n      600: '#bb362a',\n      700: '#8c2820',\n      800: '#5e1b15',\n      900: '#2f0d0b',\n    },\n    'brand-yellow': {\n      50: '#feebb4',\n      100: '#fdd769',\n      200: '#fcc937',\n      300: '#fbc31e',\n      400: '#fbbc05',\n      500: '#e2a905',\n      600: '#c99604',\n      700: '#977103',\n      800: '#644b02',\n      900: '#322601',\n    },\n    'brand-green': {\n      50: '#c2e5cb',\n      100: '#85cb98',\n      200: '#5db975',\n      300: '#48b164',\n      400: '#34a853',\n      500: '#2f974b',\n      600: '#2a8642',\n      700: '#1f6532',\n      800: '#154321',\n      900: '#0a2211',\n    },\n  },\n  fonts: {\n    body: 'Roboto, sans-serif',\n    heading: 'Roboto, serif',\n    mono: 'Roboto Mono, monospace',\n  },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { CSSReset, ThemeProvider } from '@chakra-ui/core';\n\nimport { App } from './App';\n\nimport 'typeface-roboto';\nimport 'typeface-roboto-mono';\nimport { theme } from './config/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}