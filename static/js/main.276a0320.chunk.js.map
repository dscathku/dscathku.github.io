{"version":3,"sources":["serviceWorker.js","App.js","config/theme.js","index.js"],"names":["Boolean","window","location","hostname","match","App","Stack","spacing","Text","fontSize","Flex","mx","justifyContent","map","color","index","Box","key","w","h","backgroundColor","theme","defaultTheme","colors","50","100","200","300","400","500","600","700","800","900","fonts","body","heading","mono","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCdOC,EAAM,WACjB,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAS,GACd,kBAACC,EAAA,EAAD,CAAMC,SAAU,OAAhB,eAEA,kBAACC,EAAA,EAAD,CAAMC,GAAI,GAAIC,eAAgB,iBAC3B,CAAC,OAAQ,MAAO,SAAU,SAASC,KAAI,SAACC,EAAOC,GAAR,OACtC,kBAACC,EAAA,EAAD,CAAKC,IAAKF,EAAOG,EAAG,MAAOC,EAAG,GAAIC,gBAAe,gBAAWN,EAAX,gB,8BCT9CO,EAAK,eACbC,IADa,CAEhBC,OAAO,eACFD,IAAaC,OADZ,CAEJ,aAAc,CACZC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WAEP,YAAa,CACXT,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WAEP,eAAgB,CACdT,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WAEP,cAAe,CACbT,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,aAGTC,MAAO,CACLC,KAAM,qBACNC,QAAS,gBACTC,KAAM,4BC/CVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAepB,MAAOA,GACpB,kBAACqB,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.276a0320.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Box, Stack, Text } from '@chakra-ui/core';\nimport Flex from '@chakra-ui/core/dist/Flex';\n\nexport const App = () => {\n  return (\n    <Stack spacing={4}>\n      <Text fontSize={'3xl'}>hello world</Text>\n\n      <Flex mx={10} justifyContent={'space-between'}>\n        {['blue', 'red', 'yellow', 'green'].map((color, index) => (\n          <Box key={index} w={'20%'} h={40} backgroundColor={`brand-${color}.400`} />\n        ))}\n      </Flex>\n    </Stack>\n  );\n};\n","import { theme as defaultTheme } from '@chakra-ui/core';\n\nexport const theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    'brand-blue': {\n      50: '#c2dafc',\n      100: '#84b6f8',\n      200: '#5b9df6',\n      300: '#4791f5',\n      400: '#3285f4',\n      500: '#2d78dc',\n      600: '#286ac3',\n      700: '#1e5092',\n      800: '#143562',\n      900: '#0a1b31',\n    },\n    'brand-red': {\n      50: '#f9c7c2',\n      100: '#f28e86',\n      200: '#ee695d',\n      300: '#ec5649',\n      400: '#ea4335',\n      500: '#d33c30',\n      600: '#bb362a',\n      700: '#8c2820',\n      800: '#5e1b15',\n      900: '#2f0d0b',\n    },\n    'brand-yellow': {\n      50: '#feebb4',\n      100: '#fdd769',\n      200: '#fcc937',\n      300: '#fbc31e',\n      400: '#fbbc05',\n      500: '#e2a905',\n      600: '#c99604',\n      700: '#977103',\n      800: '#644b02',\n      900: '#322601',\n    },\n    'brand-green': {\n      50: '#c2e5cb',\n      100: '#85cb98',\n      200: '#5db975',\n      300: '#48b164',\n      400: '#34a853',\n      500: '#2f974b',\n      600: '#2a8642',\n      700: '#1f6532',\n      800: '#154321',\n      900: '#0a2211',\n    },\n  },\n  fonts: {\n    body: 'Roboto, sans-serif',\n    heading: 'Roboto, serif',\n    mono: 'Roboto Mono, monospace',\n  },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { CSSReset, ThemeProvider } from '@chakra-ui/core';\n\nimport { App } from './App';\n\nimport 'typeface-roboto';\nimport 'typeface-roboto-mono';\nimport { theme } from './config/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}